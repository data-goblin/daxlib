/// Wraps content in SVG container for Power BI visualization
/// width		STRING		width (pixels or percentage)
/// height		STRING		height (pixels or percentage)
/// viewbox		STRING		Optional: viewBox (e.g., "0 0 100 100")
/// contents	STRING		To include one or more SVG elements (e.g., from DaxLib.SVG.Element functions)
/// sortValue	EXPR		Optional: sort value for ordering in tables
function 'DaxLib.SVG.SVG' =
		(
			width : STRING,
			height : STRING, 
			viewbox : STRING,
			contents : STRING,
			sortValue : EXPR
		) =>

			"data:image/svg+xml;utf8," &
			"<svg " & 
			"width='" & width & "' height='" & height & "' " &
			IF( NOT ISBLANK( viewbox ), "viewBox='" & viewbox & "' " ) &
			"xmlns='http://www.w3.org/2000/svg'>" &
			IF( NOT ISBLANK( sortValue ), "<desc>" & FORMAT( sortValue, "000000000000" ) & "</desc>" ) &
			contents &
			"</svg>"

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Converts percentage to angle for circular visualizations
/// perc			SCALAR Double VAL	Percentage value (0-100)
/// startAngle 		SCALAR VAL int64	Starting angle in degrees (default -90 for top)
/// sweepAngle		SCALAR VAL int64	Total sweep angle in degrees (default 360 for full circle)
function 'DaxLib.SVG.Scale.AngleFromPercent' = 
		(
			perc : SCALAR Double VAL,
			startAngle : SCALAR int64 VAL,
			sweepAngle : SCALAR int64 VAL
		) =>
			
			startAngle + ( perc / 100 * sweepAngle )

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Generates path data for arc segments used in donut and gauge charts
/// cx				SCALAR VAL	Center X position in pixels
/// cy				SCALAR VAL	Center Y position in pixels
/// radius			SCALAR VAL	Outer radius in pixels
/// startAngle		SCALAR VAL	Starting angle in degrees (0 = right, 90 = bottom)
/// endAngle		SCALAR VAL	Ending angle in degrees
/// innerRadius		SCALAR VAL	Inner radius for donut effect (0 for pie slice)
function 'DaxLib.SVG.Scale.ArcPath' = 
		(
			cx : SCALAR VAL,
			cy : SCALAR VAL,
			radius : SCALAR VAL,
			startAngle : SCALAR VAL,
			endAngle : SCALAR VAL,
			innerRadius : SCALAR VAL
		) =>

			VAR _StartRad = startAngle * PI() / 180
			VAR _EndRad = 	endAngle * PI() / 180
			VAR _LargeArc = IF( endAngle - startAngle > 180, 1, 0 )

			VAR _X1 = 	cx + radius * COS (_StartRad )
			VAR _Y1 = 	cy + radius * SIN (_StartRad )
			VAR _X2 = 	cx + radius * COS (_EndRad )
			VAR _Y2 = 	cy + radius * SIN (_EndRad )

			VAR _InnerX1 = 	cx + innerRadius * COS( _StartRad )
			VAR _InnerY1 = 	cy + innerRadius * SIN( _StartRad )
			VAR _InnerX2 = 	cx + innerRadius * COS( _EndRad )
			VAR _InnerY2 = 	cy + innerRadius * SIN( _EndRad )

			RETURN
				IF(
					innerRadius > 0,
					"M " & _InnerX1 & " " & _InnerY1 &
					" L " & _X1 & " " & _Y1 &
					" A " & radius & " " & radius &
					" 0 " & _LargeArc & " 1 " &
					_X2 & " " & _Y2 &
					" L " & _InnerX2 & " " & _InnerY2 &
					" A " & innerRadius & " " & innerRadius &
					" 0 " & _LargeArc & " 0 " &
					_InnerX1 & " " & _InnerY1 & " Z",
					"M " & cx & " " & cy &
					" L " & _X1 & " " & _Y1 &
					" A " & radius & " " & radius &
					" 0 " & _LargeArc & " 1 " &
					_X2 & " " & _Y2 & " Z"
				)

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Calculate the maximum for a value plotted on an SVG Chart
/// Handles both category crossfiltering and (sub) totals
/// measureValue	EXPR,			The actual you will measure, expects a measure reference
/// columnOne		ANYREF EXPR		The scope of the data for which the SVG will be used, Expects a table expression
/// axisBuffer		NUMERIC VAL		How much buffer should exist between the axis max and the end of the visual
function 'DaxLib.SVG.Scale.AxisMax' = 
		(
			measureValue : EXPR,
			columnOne : ANYREF EXPR,
			axisBuffer : NUMERIC VAL
		) =>
			
			VAR _TotalScope = ALL ( columnOne )

			-- Calculates the highest value in the data scope
			VAR _MaxInScope =
				CALCULATE(
					MAXX( _TotalScope, measureValue ),
					_TotalScope
				)

			-- Calculates the total for the data scope
			VAR _MaxOverall =
				CALCULATE (
					measureValue,
					_TotalScope
				)

			-- Configures axis for categories if one is selected, otherwise for the total
			VAR _Max =
				IF (
					HASONEVALUE ( columnOne ),
					_MaxInScope,
					_MaxOverall
				)

			RETURN _Max * axisBuffer

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Calculate the minimum for a value plotted on an SVG
/// measureValue	EXPR			The actual you will measure, expects a measure reference
/// columnOne		ANYREF			The scope of the data for which the SVG will be used, Expects a table expression
/// axisBuffer		NUMERIC VAL		How much buffer should exist between the axis min and the end of the visual
function 'DaxLib.SVG.Scale.AxisMin' =
		(
			measureValue : EXPR,
			columnOne : ANYREF,
			axisBuffer : NUMERIC VAL
		) =>  
		
			VAR _TotalScope = ALL ( columnOne )
			VAR _MinInScope =
				CALCULATE(
					MINX(
						_TotalScope,
						measureValue
					),
					_TotalScope
				)

			RETURN  _MinInScope * axisBuffer

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Determines the axis range by subtracting the minimum from the maximum
/// maxValue	NUMERIC VAL	The highest expected value (Recommended: Use SVG.Scale.AxisMax)
/// minValue	NUMERIC VAL	The lowest expected value. Typically a fixed value
function 'DaxLib.SVG.Scale.AxisRange' =
		(
			maxValue : NUMERIC VAL,
			minValue : NUMERIC VAL
		) =>
			
			maxValue - minValue

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Returns a colour based on where a value falls within defined thresholds
/// inputValue		SCALAR VAL	The value to evaluate
/// thresholdLow	SCALAR VAL	Lower threshold value
/// thresholdHigh	SCALAR VAL	Upper threshold value
/// low				STRING		STRING for values <= thresholdLow
/// mid				STRING		STRING for values between thresholds
/// high			STRING		STRING for values >= thresholdHigh	
function 'DaxLib.SVG.Scale.StringByThreshold' =
		(
			inputValue : SCALAR VAL,
			thresholdLow : SCALAR VAL,
			thresholdHigh : SCALAR VAL,
			colourLow : SCALAR VAL,
			colourMid : SCALAR VAL,
			colourHigh : SCALAR VAL
		) =>

			SWITCH(
				true,
				inputValue <= thresholdLow, 
					colourLow,
				inputValue >= thresholdHigh, 
					colourHigh,
				colourMid
			)

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Map a value from one value scale to another
/// Used for scaling values to fit within SVG dimensions
/// inputValue		NUMERIC	VAL		The value to map
/// fromMin			NUMERIC	VAL		The minimum value of the original scale
/// fromMax			NUMERIC	VAL		The maximum value of the original scale
/// toMin			NUMERIC	VAL		The minimum value of the new scale
/// toMax			NUMERIC	VAL		The maximum value of the new scale
function 'DaxLib.SVG.Scale.Normalize' =
		(
			inputValue: NUMERIC VAL,
			fromMin: NUMERIC VAL,
			fromMax: NUMERIC VAL,
			toMin: NUMERIC VAL,
			toMax: NUMERIC VAL
		) =>
			
			( ( inputValue - fromMin ) / ( fromMax - fromMin ) ) * ( toMax - toMin ) + toMin

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Geneates a STRING of common shape attributes, that can be passed to DaxLib.SVG.Element.* or DaxLib.SVG.Def.* functions
/// fill             STRING      Fill color or gradient reference
/// fillOpacity      DOUBLE      Fill opacity (0-1)
/// fillRule         STRING      Fill rule ("nonzero" or "evenodd")
/// stroke           STRING      Stroke color
/// strokeWidth      INT64       Stroke width
/// strokeOpacity    DOUBLE      Stroke opacity (0-1)
/// opacity          DOUBLE      Overall opacity (0-1)
function 'DaxLib.SVG.Attr.Shapes' = 
		(
			fill: STRING,
			fillOpacity: DOUBLE,
			fillRule: STRING,
			stroke: STRING,
			strokeWidth: INT64,
			strokeOpacity: DOUBLE,
			opacity: DOUBLE
		) =>

			IF( NOT ISBLANK( fill ),          "fill='" & fill & "' ") &
			IF( NOT ISBLANK( fillOpacity ),   "fill-opacity='" & fillOpacity & "' ") &
			IF( NOT ISBLANK( fillRule ),      "fill-rule='" & fillRule & "' ") &
			IF( NOT ISBLANK( stroke ),        "stroke='" & stroke & "' ") &
			IF( NOT ISBLANK( strokeWidth ),   "stroke-width='" & strokeWidth & "' ") &
			IF( NOT ISBLANK( strokeOpacity ), "stroke-opacity='" & strokeOpacity & "' ") &
			IF( NOT ISBLANK( opacity ),       "opacity='" & opacity & "' ")

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Text-specific attributes
/// fontFamily      STRING      Font family for text
/// fontSize        INT64       Font size for text
/// fontWeight      STRING      Weight ("normal", "bold", "lighter", "100-900")
/// fontStyle       STRING      Style ("normal", "italic", "oblique")
/// textAnchor      STRING      Anchor ("start", "middle", "end")
/// baseline        STRING      Dominant baseline
/// textDecoration  STRING      Decoration ("none", "underline", "overline", "line-through")
/// letterSpacing   STRING      Space between letters
/// wordSpacing     STRING      Space between words
function 'DaxLib.SVG.Attr.Txt' = 
		(
			fontFamily: STRING,
			fontSize: INT64,
			fontWeight: STRING,
			fontStyle: STRING,
			textAnchor: STRING,
			baseline: STRING,
			textDecoration: STRING,
			letterSpacing: STRING,
			wordSpacing: STRING
		) =>

			IF( NOT ISBLANK( fontFamily ),     "font-family='" & fontFamily & "' ") &
			IF( NOT ISBLANK( fontSize ),       "font-size='" & fontSize & "' ") &
			IF( NOT ISBLANK( fontWeight ),     "font-weight='" & fontWeight & "' ") &
			IF( NOT ISBLANK( fontStyle ),      "font-style='" & fontStyle & "' ") &
			IF( NOT ISBLANK( textAnchor ),     "text-anchor='" & textAnchor & "' ") &
			IF( NOT ISBLANK( baseline ),       "dominant-baseline='" & baseline & "' ") &
			IF( NOT ISBLANK( textDecoration ), "text-decoration='" & textDecoration & "' ") &
			IF( NOT ISBLANK( letterSpacing ),  "letter-spacing='" & letterSpacing & "' ") &
			IF( NOT ISBLANK( wordSpacing ),    "word-spacing='" & wordSpacing & "' ")

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Comprehensive stroke attributes function
/// stroke             STRING    Stroke color (e.g., "#FF0000", "red")
/// strokeWidth        INT64     Stroke width
/// strokeOpacity      DOUBLE    Stroke opacity (0-1)
/// strokeDasharray    STRING    Stroke dasharray pattern (e.g., "5,5" for dashed)
/// strokeDashoffset   STRING    Stroke dashoffset
/// strokeLinecap      STRING    Stroke linecap ("butt", "round", "square")
/// strokeLinejoin     STRING    Stroke linejoin ("miter", "round", "bevel")
/// strokeMiterlimit   STRING    Miter limit for stroke joins
/// markerStart        STRING    Marker for start of line (e.g., 'url(#arrowStart)')
/// markerMid          STRING    Marker for middle points of line
/// markerEnd          STRING    Marker for end of line (e.g., 'url(#arrowEnd)')
function 'DaxLib.SVG.Attr.Stroke' = 
		(
			stroke: STRING,
			strokeWidth: INT64,
			strokeOpacity: DOUBLE,
			strokeDasharray: STRING,
			strokeDashoffset: STRING,
			strokeLinecap: STRING,
			strokeLinejoin: STRING,
			strokeMiterlimit: STRING,
			markerStart: STRING,
			markerMid: STRING,
			markerEnd: STRING
		) =>
			VAR _Stroke =           IF(NOT ISBLANK(stroke),           "stroke='" & stroke & "' ")
			VAR _StrokeWidth =      IF(NOT ISBLANK(strokeWidth),      "stroke-width='" & strokeWidth & "' ")
			VAR _StrokeOpacity =    IF(NOT ISBLANK(strokeOpacity),    "stroke-opacity='" & strokeOpacity & "' ")
			VAR _StrokeDasharray =  IF(NOT ISBLANK(strokeDasharray),  "stroke-dasharray='" & strokeDasharray & "' ")
			VAR _StrokeDashoffset = IF(NOT ISBLANK(strokeDashoffset), "stroke-dashoffset='" & strokeDashoffset & "' ")
			VAR _StrokeLinecap =    IF(NOT ISBLANK(strokeLinecap),    "stroke-linecap='" & strokeLinecap & "' ")
			VAR _StrokeLinejoin =   IF(NOT ISBLANK(strokeLinejoin),   "stroke-linejoin='" & strokeLinejoin & "' ")
			VAR _StrokeMiterlimit = IF(NOT ISBLANK(strokeMiterlimit), "stroke-miterlimit='" & strokeMiterlimit & "' ")
			VAR _MarkerStart =      IF(NOT ISBLANK(markerStart),      "marker-start='" & markerStart & "' ")
			VAR _MarkerMid =        IF(NOT ISBLANK(markerMid),        "marker-mid='" & markerMid & "' ")
			VAR _MarkerEnd =        IF(NOT ISBLANK(markerEnd),        "marker-end='" & markerEnd & "' ")
			
			RETURN
				_Stroke &
				_StrokeWidth &
				_StrokeOpacity &
				_StrokeDasharray &
				_StrokeDashoffset &
				_StrokeLinecap &
				_StrokeLinejoin &
				_StrokeMiterlimit &
				_MarkerStart &
				_MarkerMid &
				_MarkerEnd

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Generate Transform string for SVG elements
/// translate 	STRING	Translation coordinates (e.g., "10,20")
/// rotate    	STRING	Rotation with optional center point (e.g., "45" or "45 50 50")
/// scale     	STRING	Scale factors (e.g., "2" or "2,1.5")
/// skewX     	STRING	Horizontal skew angle in degrees
/// skewY     	STRING	Vertical skew angle in degrees
function 'DaxLib.SVG.Transforms' = 
		(
			translate: STRING,
			rotate: STRING,
			scale: STRING,
			skewX: STRING,
			skewY: STRING
		) =>

			IF(NOT ISBLANK(translate), "translate(" & translate & ") ") &
			IF(NOT ISBLANK(rotate), "rotate(" & rotate & ") ") &
			IF(NOT ISBLANK(scale), "scale(" & scale & ") ") &
			IF(NOT ISBLANK(skewX), "skewX(" & skewX & ") ") &
			IF(NOT ISBLANK(skewY), "skewY(" & skewY & ") ") 

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Create a <def> element from one or more DaxLib.SVG.Def.* Elements
/// defs	STRING	Concatenated lists of def Elements to include in a def block
function 'DaxLib.SVG.Element.Defs' = 
		(
			defs: STRING    // concatenated lists of elements to include in a def block
		) =>

			"<defs>" &
			defs &  
			"</defs>"

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Create a gradient stop element
/// offset		STRING	Stop position
/// colour		STRING	colour value (hex or named colour)
/// opacity		STRING	Optional: opacity value
function 'DaxLib.SVG.Def.GradientStop' = 
		(
			offset: STRING,
			colour: STRING,
			opacity: STRING
		) =>

			"<stop offset='" & offset & 
			"' stop-color='" & colour & "'" &
			IF( NOT ISBLANK( opacity ), " stop-opacity='" & opacity & "'" ) &
			"/>"

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Create a linear gradient definition
/// defId		STRING	The unique identifier for the gradient
/// stops		STRING	Concatinated list of one or more DaxLib.SVG.Def.GradientStop Elements
/// x1			STRING	Optional: Start X position
/// y1			STRING	Optional: Start Y position
/// x2			STRING	Optional: End X position
/// y2			STRING	Optional: End Y position
function 'DaxLib.SVG.Def.LinearGradient' = 
		(
			defId: STRING,
			stops: STRING,
			x1: STRING,
			y1: STRING,
			x2: STRING,
			y2: STRING
		) =>
			
			"<linearGradient" & 
			" id='" & defId & "'" &
			IF( NOT ISBLANK( x1 ), " x1='" & x1 & "'" ) &
			IF( NOT ISBLANK( y1 ), " y1='" & y1 & "'" ) &
			IF( NOT ISBLANK( x2 ), " x2='" & x2 & "'" ) &
			IF( NOT ISBLANK( y2 ), " y2='" & y2 & "'" ) &
			">" &
			stops &
			"</linearGradient>"
	
	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Create a radial gradient definition
/// defId		STRING	The unique identifier for the gradient
/// stops		STRING	Concatinated list of one or more DaxLib.SVG.Def.GradientStop Elements
/// cx			STRING	Optional: Center X position
/// cy			STRING	Optional: Center Y position
/// r			STRING	Optional: Radius
/// fx			STRING	Optional: Focus X position
/// fy			STRING	Optional: Focus Y position
/// fr			STRING	Optional: Focus radius
function 'DaxLib.SVG.Def.RadialGradient' = 
		(
			defId: STRING,
			stops: STRING,
			cx: STRING,
			cy: STRING,
			r: STRING,
			fx: STRING,
			fy: STRING,
			fr: STRING
		) =>

			"<radialGradient" & 
			" id='" & defId & "'" &
			IF( NOT ISBLANK( cx ), " cx='" & cx & "'" ) &
			IF( NOT ISBLANK( cy ), " cy='" & cy & "'" ) &
			IF( NOT ISBLANK( r ),  " r='" & r & "'" ) &
			IF( NOT ISBLANK( fx ), " fx='" & fx & "'" ) &
			IF( NOT ISBLANK( fy ), " fy='" & fy & "'" ) &
			IF( NOT ISBLANK( fr ), " fr='" & fr & "'" ) &
			">" &
			stops &
			"</radialGradient>"
	
	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Creates a clipping mask definition
/// defId		STRING	The unique identifier for the clip path. (Example: "cut-top", "mask-circle")
/// contents 	STRING	The SVG element(s) that make up the clipping path (typically a single shape)
function 'DaxLib.SVG.Def.ClipPath' =
		(
			defId : STRING,
			contents: STRING
		) =>
			
			"<clipPath id='" & defId & "'>" &
			contents &
			"</clipPath>"

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Create a reusable circle definition
/// defId		STRING	The unique identifier for the circle
/// cx			STRING	X center coordinate
/// cy			STRING	Y center coordinate
/// r			STRING	Radius
/// attributes	STRING	Optional: Direct SVG attributes to apply (e.g., "fill='none' stroke='blue'"), can generate with DaxLib.SVG.Attr.* or manually
/// transforms	STRING	Optional: transformation to apply (can be generated with DaxLib.SVG.Transform)
function 'DaxLib.SVG.Def.Circle' = 
		(
			defId: STRING,
			cx: STRING,
			cy: STRING,  
			r: STRING,
			attributes: STRING,
			transforms: STRING
		) =>

			"<circle id='" & defId & "'" &
			" cx='" & cx & "'" &
			" cy='" & cy & "'" &
			" r='" & r & "'" &
			IF( NOT ISBLANK( attributes ), " " & attributes & " " ) &
			IF( NOT ISBLANK( transforms ), " transform='" & transforms & "'" ) &
			"/>"

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Create a reusable rectangle definition
/// defId		STRING		The unique identifier for the rectangle
/// width		STRING		The width of the rectangle (pixels or percentage)
/// height		STRING		The height of the rectangle	(pixels or percentage)
/// rx			STRING		Optional: x radius for rounded corners
/// ry			STRING		Optional: y radius for rounded corners
/// attributes	STRING	Optional: Direct SVG attributes to apply (e.g., "fill='none' stroke='blue'"), can generate with DaxLib.SVG.Attr.* or manually
/// transforms	STRING		Optional: transformation to apply (can be generated with DaxLib.SVG.Transform)
function 'DaxLib.SVG.Def.Rect' = 
		(
			defId: STRING,
			width: STRING,
			height: STRING,
			rx: STRING,
			ry: STRING,
			attributes: STRING,
			transforms: STRING
		) =>

			"<rect id='" & defId & "'" &
			" width='" & width & "'" &
			" height='" & height & "'" &
			IF(NOT ISBLANK( rx ), " rx='" & rx & "'" ) & 
			IF(NOT ISBLANK( ry ), " ry='" & ry & "'" ) &
			IF( NOT ISBLANK( attributes ), " " & attributes & " " ) &
			IF( NOT ISBLANK( transforms ), " transform='" & transforms & "'" ) &
			"/>"	

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Create a reusable line definition
/// defId		STRING	The unique identifier for the line
/// x1			STRING	The x position of the start point
/// y1			STRING	The y position of the start point
/// x2			STRING	The x position of the end point
/// y2			STRING	The y position of the end point
/// attributes	STRING	Optional: Direct SVG attributes to apply (e.g., "stroke-width='2' stroke='blue'"), can generate with DaxLib.SVG.Attr.* or manually
/// transforms	STRING	Optional: transformation to apply (can be generated with DaxLib.SVG.Transform)
function 'DaxLib.SVG.Def.Line' = 
		(
			defId: STRING,
			x1: STRING,
			y1: STRING,
			x2: STRING,
			y2: STRING,
			attributes: STRING,
			transforms: STRING
		) =>

			"<line id='" & defId & "'" &
			" x1='" & x1 & "'" &
			" y1='" & y1 & "'" &
			" x2='" & x2 & "'" &
			" y2='" & y2 & "'" &
			IF( NOT ISBLANK( attributes ), " " & attributes & " " ) &
			IF( NOT ISBLANK( transforms ), " transform='" & transforms & "'" ) &
			"/>"
				
	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Create a reusable path definition
/// defId		STRING	The unique identifier for the path
/// d			STRING	The path data string (e.g., "M10 10 L90 90")
/// attributes	STRING	Optional: Direct SVG attributes to apply (e.g., "fill='none' stroke='blue'"), can generate with DaxLib.SVG.Attr.* or manually
/// transforms	STRING	Optional: transformation to apply (can be generated with DaxLib.SVG.Transform)
function 'DaxLib.SVG.Def.Paths' =
		(
			defId: STRING,
			d: STRING,
			attributes: STRING,
			transforms: STRING
		) =>

			"<path id='" & defId & "'" &
			" d='" & d & "'" &
			IF( NOT ISBLANK( attributes ), " " & attributes & " " ) &
			IF( NOT ISBLANK( transforms ), " transform='" & transforms & "'" ) &
			"/>"
				
	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Reference a previously defined SVG element with optional positioning and styling
/// This function is used to reuse elements that have been defined using DaxLib.SVG.Def.* functions
/// (e.g., DaxLib.SVG.Def.Circle, DaxLib.SVG.Def.Rect, DaxLib.SVG.Def.Paths, etc.). Instead of duplicating element definitions,
/// use the appropriate DaxLib.SVG.Def.* function once and then reference it multiple times with DaxLib.SVG.Element.UseDef.
/// defId		STRING	The identifier of the defined element to use
/// x			STRING	X position where the element should be placed
/// y			STRING	Y position where the element should be placed
/// transforms	STRING	Optional: transformation to apply (can be generated with DaxLib.SVG.Transforms)
function 'DaxLib.SVG.Element.UseDef' = 
		(
			defId: STRING,
			x: STRING,
			y: STRING,
			transforms: STRING
		) =>

			"<use" &
			" href='#" & defId & "'" &
			IF( NOT ISBLANK( x ), " x='" & x & "'" ) &
			IF( NOT ISBLANK( y ), " y='" & y & "'" ) &
			IF( NOT ISBLANK( transforms ), " transform='" & transforms & "'" ) & 
			"/>"

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Generates SVG group element
/// Transformations applied to the <g> element are performed on its child elements, and its attributes are inherited by its children. It can also group multiple elements to be referenced later with the <use> element.
/// contents	SCALAR VAL	Content to group (recommend including all content in a single _SvgGroup variable defined upstream)
/// opacity		SCALAR VAL	Optional: Opacity for entire group (0-1, optional)
/// transforms	SCALAR VAL	Optional: Transform (e.g., "translate(50,50) rotate(45)") (can be generated with DaxLib.SVG.Transform)
function 'DaxLib.SVG.Element.Group' =
		(
			contents : SCALAR VAL,
			opacity : SCALAR VAL,
			transforms : SCALAR VAL
		) =>

			"<g" &
			IF( NOT ISBLANK( transforms ), " transform='" & transforms & "'" ) &
			IF( NOT ISBLANK( opacity ), " opacity='" & opacity & "'" ) &
			">" & contents & "</g>"

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Generates a circle SVG element
/// cx			STRING	The x position of the center
/// cy			STRING	The y position of the center
/// r			STRING	The radius
/// attributes	STRING	Optional: Direct SVG attributes to apply (e.g., "fill='red' stroke-width='2'"), can generate with DaxLib.SVG.Attr.* or manually
/// transforms	STRING	Optional: transformation to apply (can be generated with DaxLib.SVG.Transforms)
function 'DaxLib.SVG.Element.Circle' = 
		(
			cx: STRING,
			cy: STRING,
			r: STRING,
			attributes: STRING,
			transforms: STRING
		) =>

			"<circle" &
			" cx='" & cx & "'" &
			" cy='" & cy & "'" &
			" r='" & r & "'" &
			IF( NOT ISBLANK( attributes ), " " & attributes & " " ) &
			IF( NOT ISBLANK( transforms ), " transform='" & transforms & "'" ) & 
			"/>"

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Generates a rectangle SVG element
/// x			STRING	The x position
/// y			STRING	The y position
/// width		STRING	The width (pixels or percentage)
/// height		STRING	The height (pixels or percentage)
/// rx			STRING	Optional: x radius for rounded corners
/// ry			STRING	Optional: y radius for rounded corners
/// attributes	STRING	Optional: Direct SVG attributes to apply (e.g., "fill='red' stroke-width='2'"), can generate with DaxLib.SVG.Attr.* or manually
/// transforms	STRING	Optional: transformation to apply (can be generated with DaxLib.SVG.Transforms)
function 'DaxLib.SVG.Element.Rect' =
		(
			x: STRING,
			y: STRING,
			width: STRING,
			height: STRING,
			rx: STRING,
			ry: STRING,
			attributes: STRING,
			transforms: STRING
		) =>

			"<rect" &
			" x='" & x & "'" &
			" y='" & y & "'" &
			" width='" & width & "'" &
			" height='" & height & "'" &
			IF( NOT ISBLANK( rx ), " rx='" & rx & "'" ) &
			IF( NOT ISBLANK( ry ), " ry='" & ry & "'" ) &
			IF( NOT ISBLANK( attributes ), " " & attributes & " " ) &
			IF( NOT ISBLANK( transforms ), " transform='" & transforms & "'" ) & 
			"/>"

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Generates SVG line element
/// x1			STRING	Starting X position (left edge is 0)
/// y1			STRING	Starting Y position (top edge is 0)
/// x2			STRING	Ending X position (left edge is 0)
/// y2			STRING	Ending Y position (top edge is 0)
/// attributes	STRING	Optional: Direct SVG attributes to apply (e.g., "stroke-dasharray='5,5' marker-end='url(#arrow)'"), can generate with DaxLib.SVG.Attr.* or manually
/// transforms	STRING	Optional: transformation to apply (can be generated with DaxLib.SVG.Transforms)
function 'DaxLib.SVG.Element.Line' =
		(
			x1: STRING,
			y1: STRING,
			x2: STRING,
			y2: STRING,
			attributes: STRING,
			transforms: STRING
		) =>  
			
			"<line" &
			" x1='" & x1 & "'" &
			" y1='" & y1 & "'" &
			" x2='" & x2 & "'" &
			" y2='" & y2 & "'" &
			IF( NOT ISBLANK( attributes ), " " & attributes & " " ) &
			IF( NOT ISBLANK( transforms ), " transform='" & transforms & "'" ) & 
			"/>"

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Create a SVG path element	
/// d			STRING	The path data string (e.g., "M10 10 L90 90")
/// attributes	STRING	Optional: Direct SVG attributes to apply (e.g., "pathLength='100' fill-rule='evenodd'"), can generate with DaxLib.SVG.Attr.* or manually
/// transforms	STRING	Optional: transformation to apply (can be generated with DaxLib.SVG.Transforms)
function 'DaxLib.SVG.Element.Paths' =
		(
			d: STRING,
			attributes: STRING,
			transforms: STRING
		) =>

			"<path d='" & d & "'" &
			IF( NOT ISBLANK( attributes ), " " & attributes & " " ) &
			IF( NOT ISBLANK( transforms ), " transform='" & transforms & "'" ) & 
			"/>"

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Generates an ellipse SVG element
/// cx			STRING	The x position of the center
/// cy			STRING	The y position of the center
/// rx			STRING	The x radius
/// ry			STRING	The y radius
/// attributes	STRING	Optional: Direct SVG attributes to apply (e.g., "fill='none' stroke='blue'"), can generate with DaxLib.SVG.Attr.* or manually
/// transforms	STRING	Optional: transformation to apply (can be generated with DaxLib.SVG.Transforms)
function 'DaxLib.SVG.Element.Ellipse' = 
		(
			cx: STRING,
			cy: STRING,
			rx: STRING,
			ry: STRING,
			attributes: STRING,
			transforms: STRING
		) =>

			"<ellipse" &
			" cx='" & cx & "'" &
			" cy='" & cy & "'" &
			" rx='" & rx & "'" &
			" ry='" & ry & "'" &
			IF( NOT ISBLANK( attributes ), " " & attributes & " " ) &
			IF( NOT ISBLANK( transforms ), " transform='" & transforms & "'" ) & 
			"/>"

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Creates a polygon (closed shape)
/// points		STRING	Space-separated x,y coordinate pairs (e.g., "0,10 20,30 40,15")
/// attributes	STRING	Optional: Direct SVG attributes to apply (e.g., "fill-rule='nonzero' vector-effect='non-scaling-stroke'"), can generate with DaxLib.SVG.Attr.* or manually
/// transforms	STRING	Optional: transformation to apply (can be generated with DaxLib.SVG.Transforms)
function 'DaxLib.SVG.Element.Polygon' =
		(
			points: STRING,
			attributes: STRING,
			transforms: STRING
		) =>

			"<polygon" &
			" points='" & points & "'" &
			IF( NOT ISBLANK( attributes ), " " & attributes & " " ) &
			IF( NOT ISBLANK( transforms ), " transform='" & transforms & "'" ) & 
			"/>"

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Creates a polyline (connected points)
/// points		STRING	Space-separated x,y coordinate pairs (e.g., "0,10 20,30 40,15")
/// attributes	STRING	Optional: Direct SVG attributes to apply (e.g., "marker-start='url(#dot)' vector-effect='non-scaling-stroke'"), can generate with DaxLib.SVG.Attr.* or manually
/// transforms	STRING	Optional: transformation to apply (can be generated with DaxLib.SVG.Transforms)
function 'DaxLib.SVG.Element.Polyline' =
		(
			points: STRING,
			attributes: STRING,
			transforms: STRING
		) =>

			"<polyline" &
			" points='" & points & "'" &
			IF( NOT ISBLANK( attributes ), " " & attributes & " " ) &
			IF( NOT ISBLANK( transforms ), " transform='" & transforms & "'" ) & 
			"/>"

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Creates a text SVG element
/// x			STRING	The x position of the text
/// y			STRING	The y position of the text
/// txt			STRING	The text content
/// dx			STRING	Optional: x offset from position
/// dy			STRING	Optional: y offset from position
/// attributes	STRING	Optional: Direct SVG attributes to apply (e.g., "text-anchor='middle' dominant-baseline='middle'"), can generate with DaxLib.SVG.Attr.* or manually
/// transforms	STRING	Optional: additional transforms (e.g. "scale(1.2) translate(10,10)") (can be generated with DaxLib.SVG.Transforms)
function 'DaxLib.SVG.Element.Txt' =
		(
			x: STRING,
			y: STRING,
			txt: STRING,
			dx: STRING,
			dy: STRING,
			attributes: STRING,
			transforms: STRING
		) =>

			"<text" &
			" x='" & x & "'" &
			" y='" & y & "'" &
			IF(NOT ISBLANK( dx ), " dx='" & dx & "'" ) & 
			IF(NOT ISBLANK( dy ), " dy='" & dy & "'" ) &
			IF( NOT ISBLANK( attributes ), " " & attributes & " " ) &
			IF( NOT ISBLANK( transforms ), " transform='" & transforms & "'" ) &
			">" & txt & 
			"</text>"

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Create a pill SVG Compound element (rounded rectangle with text centered inside)
/// width 		STRING	The width of the SVG canvas
/// height 		STRING	The height of the SVG canvas
/// txt 		STRING	The text to display
/// pillcolour 	STRING	The Hex color of the fill i.e "#01B8AA80"
/// txtColor 	STRING	The Hex color of the text i.e "#FFFFFF"
function 'DaxLib.SVG.Compound.Pill' = 
		(
			width: STRING,
			height: STRING,
			txt: STRING,
			pillcolour: STRING,
			txtcolour: STRING
		) =>

		VAR Pill = 
			DaxLib.SVG.Element.Rect(
				1,                 	// x
				1,                 	// y
				width,      		// width
				height,     		// height
				10,               	// ex
				10,               	// ry
				DaxLib.SVG.Attr.Shapes(
					pillcolour,		// fill
					BLANK(),		// fillOpacity
					BLANK(),		// fillRule
					txtcolour,		// stroke
					1,				// strokeWidth
					BLANK(),		// strokeOpacity
					BLANK()			// opacity
				),         			// attributes
				BLANK()           	// transforms
			)

		VAR TextElement = 
			DaxLib.SVG.Element.Txt(
				width * 0.50,      	// x
				height * 0.58,     	// y
				txt,              	// txt
				0,                	// dx
				0,                	// dy
				DaxLib.SVG.Attr.Shapes(
					txtcolour,		// fill
					BLANK(),		// fillOpacity
					BLANK(),		// fillRule
					BLANK(),		// stroke
					BLANK(),		// strokeWidth
					BLANK(),		// strokeOpacity
					BLANK()			// opacity
				) &
				DaxLib.SVG.Attr.Txt(
					"Segoe UI",		// fontFamily
					12,				// fontSize
					BLANK(),		// fontWeight
					BLANK(),		// fontStyle
					"middle",		// textAnchor
					"middle",		// baseline
					BLANK(),		// textDecoration
					BLANK(),		// letterSpacing
					BLANK()			// wordSpacing
				),         			// attributes
				BLANK()				// transforms
			)

		RETURN
		
			Pill & 
			TextElement

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Example chart created using the DaxLib.SVG functions
/// Generate SVG performance bar with target line and status indicator
/// Returns SVG string for use in Table/Matrix visuals (set Image size: Height 25px, Width 100px)
/// actual					EXPR			Actual measure to evaluate
/// target					EXPR			Target measure to evaluate
/// columnOne				ANYREF EXPR		Table scope for calculating axis max (e.g., 'Customers'[Key Account Name], multiple columns not yet supported)
/// thresholdVeryBad		NUMERIC VAL		Performance thresholds (Percenage)
/// thresholdBad			NUMERIC VAL		Performance thresholds (Percenage)
/// thresholdGood			NUMERIC VAL		Performance thresholds (Percenage)
/// thresholdVeryGood		NUMERIC VAL		Performance thresholds (Percenage)
/// colourBadLow			STRING VAL		Status colours
/// colourBadHigh			STRING VAL	 	Status colours
/// colourGoodLow			STRING VAL		Status colours
/// colourGoodHigh			STRING VAL		Status colours
function 'DaxLib.SVG.BulletChart.ActionDot' =
		(
			actual: EXPR,
			target: EXPR,
			columnOne: ANYREF EXPR,
			thresholdVeryBad: NUMERIC VAL,
			thresholdBad: NUMERIC VAL,
			thresholdGood: NUMERIC VAL,
			thresholdVeryGood: NUMERIC VAL,
			colourBadLow: STRING VAL,
			colourBadHigh: STRING VAL,
			colourGoodLow: STRING VAL,
			colourGoodHigh: STRING VAL
		) =>
		
			// Chart dimensions
			VAR _BarMax = 100
			VAR _BarMin = 20

			// Fixed colour config
			VAR _colourBackground = "#F5F5F5"
			VAR _colourBaseline = "#797979"
			VAR _colourTarget = "black"

			// Get current values
			VAR _Actual = actual
			VAR _Target = target

			// Calculate performance
			VAR _Performance = DIVIDE( _Actual - _Target, _Target )

			// Determine performance colour
			VAR _Performancecolour =
				SWITCH(
					true,
					_Performance < thresholdVeryBad, 	colourBadLow,
					_Performance < thresholdBad, 		colourBadHigh,
					_Performance > thresholdVeryGood, 	colourGoodHigh,
					_Performance > thresholdGood, 		colourGoodLow,
					"#CFCFCF"  // Default grey
				)

			// Action dot fill color
			VAR _ActionDotFill =
				IF(
					_Performance >= thresholdVeryBad && _Performance <= thresholdGood,
					"none",  // Transparent
					_Performancecolour
				)

			// Scale
			VAR _AxisMax =
				MAX(
					DaxLib.SVG.Scale.AxisMax( actual, columnOne, 1.1 ),
					DaxLib.SVG.Scale.AxisMax( target, columnOne, 1.1 )
				)
			VAR _AxisRange = 		DaxLib.SVG.Scale.AxisRange( _AxisMax, 0 )
			VAR _ActualNormalized = DaxLib.SVG.Scale.Normalize( _Actual, 0, _AxisMax, _BarMin, _BarMax )
			VAR _TargetNormalized = DaxLib.SVG.Scale.Normalize( _Target, 0, _AxisMax, _BarMin, _BarMax )

			// Create SVG Elements
			VAR _ActionDot = 
				DaxLib.SVG.Element.Circle(
					10,              		// cx
					10,              		// cy
					5,               		// r
					DaxLib.SVG.Attr.Shapes(
						_ActionDotFill, 	// fill
						BLANK(),       		// fillOpacity
						BLANK(),       		// fillRule
						BLANK(),       		// stroke
						BLANK(),       		// strokeWidth
						BLANK(),       		// strokeOpacity
						BLANK()        		// opacity
					),				   		// attributes
					BLANK()            		// transforms
				)

			VAR _BarBackground =
				DaxLib.SVG.Element.Rect(
					_BarMin, 				// x
					2,                  	// y
					_BarMax, 				// width
					16,                 	// height (80% of 20)
					BLANK(),              	// rx
					BLANK(),              	// ry
					DaxLib.SVG.Attr.Shapes(
						_colourBackground, 	// fill
						BLANK(),           	// fillOpacity
						BLANK(),           	// fillRule
						BLANK(),           	// stroke
						BLANK(),           	// strokeWidth
						BLANK(),           	// strokeOpacity
						BLANK()            	// opacity
					),						// attributes
					BLANK()                	// transforms
				)

			VAR _ActualBar =
				DaxLib.SVG.Element.Rect(
					_BarMin,				// x
					5,                      // y
					_ActualNormalized, 		// width
					10,                     // height (50% of 20)
					BLANK(),                // rx
					BLANK(),                // ry
					DaxLib.SVG.Attr.Shapes(
						"#CFCFCF",        // fill
						BLANK(),            // fillOpacity
						BLANK(),            // fillRule
						BLANK(),            // stroke
						BLANK(),            // strokeWidth
						BLANK(),            // strokeOpacity
						BLANK()             // opacity
					),						// attributes
					BLANK()                 // transforms
				)

			VAR _TargetLine =
				DaxLib.SVG.Element.Rect(
					_TargetNormalized,		// x
					2,                      // y
					2,                      // width
					16,                     // height
					BLANK(),                // rx
					BLANK(),                // ry
					DaxLib.SVG.Attr.Shapes(
						_colourTarget,      // fill
						BLANK(),            // fillOpacity
						BLANK(),            // fillRule
						BLANK(),            // stroke
						BLANK(),            // strokeWidth
						BLANK(),            // strokeOpacity
						BLANK()             // opacity
					),						// attributes	
					BLANK()                 // transforms
				)

			VAR _BarBaseline =
				DaxLib.SVG.Element.Rect(
					_BarMin,				// x
					4,                      // y
					1,                      // width
					12,                     // height
					BLANK(),                // rx
					BLANK(),                // ry
					DaxLib.SVG.Attr.Shapes(
						_colourBaseline,    // fill
						BLANK(),            // fillOpacity
						BLANK(),            // fillRule
						BLANK(),            // stroke
						BLANK(),            // strokeWidth
						BLANK(),            // strokeOpacity
						BLANK()             // opacity
					),						// attributes
					BLANK()                 // transforms
				)

			RETURN

				DaxLib.SVG.SVG(
					100,           			// width
					20,            			// height
					BLANK(),        		// viewbox
					_ActionDot &
					_BarBackground &
					_ActualBar &
					_TargetLine &
					_BarBaseline,   		// contents
					_Actual         		// sortValue
				)

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// Create a bar SVG for a given column
/// width			INT64	The width of the SVG canvas
/// height			INT64	The height of the SVG canvas
/// columnRef		AnyRef	The column to visualize
/// positiveColor	STRING	The Hex color of the positive bar i.e "#01B8AA"
/// negativeColor	STRING	The Hex color of the negative bar i.e "#FD625E"
/// zeroAxisColor	STRING	The Hex color of the zero axis i.e "#A6A6A6"
function 'DaxLib.SVG.Bar' = 
		(
			width: INT64,
			height: INT64,
			columnRef: AnyRef,
			positiveColor: STRING,
			negativeColor: STRING,
			zeroAxisColor: STRING
		) =>

			// X-axis scale
			VAR XMin = CALCULATE( MIN( columnRef ), ALLSELECTED() ) 
			VAR XMax = CALCULATE( MAX( columnRef ), ALLSELECTED() ) 

			// Map the zero point and the current value to the SVG's coordinate system
			VAR ZeroPoint = 	DaxLib.SVG.Scale.Normalize( 0, XMin, XMax, 0, width )
			VAR CurrentValue = 	SUM( columnRef )
			VAR ValuePoint =  	DaxLib.SVG.Scale.Normalize( CurrentValue, XMin, XMax, 0, width )

			// Style
			VAR _PositiveColor = IF( NOT ISBLANK( positiveColor ), positiveColor, "#01B8AA" )
			VAR _NegativeColor = IF( NOT ISBLANK( negativeColor ), negativeColor, "#FD625E" )
			VAR _ZeroAxisColor = IF( NOT ISBLANK( zeroAxisColor ), zeroAxisColor, "#A6A6A6" )
			VAR ZeroAxisStyle =
				DaxLib.SVG.Attr.Shapes(
					BLANK(),			// Fill
					BLANK(),			// FillOpacity
					BLANK(),			// FillRule
					_ZeroAxisColor,		// Stroke
					1,					// StrokeWidth
					BLANK(),			// StrokeOpacity
					BLANK()				// Opacity
				)
			VAR Rectcolour = IF( CurrentValue >= 0, _PositiveColor, _NegativeColor )
			VAR RectAttributes =
				DaxLib.SVG.Attr.Shapes(
					Rectcolour,			// fill
					BLANK(),			// fillOpacity
					BLANK(),			// fillRule
					Rectcolour,			// stroke
					BLANK(),			// strokeWidth
					BLANK(),			// strokeOpacity
					BLANK()				// opacity
				)

			// Rect
			VAR RectWidth =  ABS( ValuePoint - ZeroPoint )
			VAR RectX =		 IF( ValuePoint > ZeroPoint, ZeroPoint, ValuePoint )
			VAR Rect = 
				DaxLib.SVG.Element.Rect(
					RectX,             // x
					height / 4,        // y
					RectWidth,         // width
					height / 2,        // height
					0,                 // rx
					0,                 // ry
					RectAttributes,    // attributes
					BLANK()            // transforms
				)

			// Zero Axis Line
			VAR ZeroAxis = 
				DaxLib.SVG.Element.Line(
					ZeroPoint,         	// x1
					0,                	// y1
					ZeroPoint,          // x2
					height,				// y2
					ZeroAxisStyle,      // attributes
					BLANK()             // transforms
				)

			RETURN 
			
				DaxLib.SVG.SVG(
					width,				// width
					height,				// height
					BLANK(),			// viewbox
					ZeroAxis &
					Rect,				// contents
					BLANK()				// sortValue
				)

	annotation DAXLIB_PackageId = DaxLib.SVG

	annotation DAXLIB_PackageVersion = 0.1.2-beta